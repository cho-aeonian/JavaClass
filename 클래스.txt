클래스

추상메서드 : 완성되지 않은 메서드
- '완성되었다'의 기준?
: 중괄호 O -> 완성된 메서드(=그냥 메서드 / 자신의 기능을 가지고 있는 메서드임)
: 중괄호 X -> 완성되지 않은 메서드 (추상 메서드) 
ex) void abc() {}; -> 메서드 / 아무것도 하지 않는 것이 기능임
ex) abstract void bcd(); -> 추상메서드 / 기능이 완성되어 있지 않아서 추상메서드로 바꿔야만 하는 메서드

추상클래스 : 클래스 중에도 추상메서드(abstract)를 하나라도 포함하고 있다면
                   해당 클래스는 반드시 추상클래스로 선언되어야 한다.
ex) abstract class A {
  int a;
  abstract void abc();
}

(선택지1.abstract) class B extends A {
  int a;
  abstract void abc();
 (선택지2.@Override
  void abc() {
  기능 1..
  기능 2..
  };)
}

인터페이스 : 가지고 있는 모든 메서드들이 추상메서드일 때 해당 클래스를 인터페이스로 정의한다.
- class -> interface
ex) interface A {
  abstract void abc();
  abstract void bdc();
}

abstract class B implements A {
  @Override
  void abc() {};
}

class C extends B {
  @Override
  void bcd() P{};
} 클래스 간에는 extends, C는 추상클래스에서 구현 안된 추상메서드를 받아서 오버라이딩해줌

A extend B : B에 있는 필드와 메서드들을 A로 있는 그대로 가져온다.

A implements B : A가 책임지고(회피하지 않고) B 안에 있는 추상메서드들을 모두 오버라이딩하겠다. 